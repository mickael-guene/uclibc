This README file explains how to recompile uclibc for fdpic using an
fdpic toolchain.

Prerequisites :
 - Have an fdpic toolchain installed
 - Update your path so that it includes arm-v7-linux-uclibceabi-gcc
   binary provided by the fdpic toolchain
 - Have access to the kernel tree for your target

1) Prepare the directory structure
 a) define WORK environment variable to your working directory
$ export WORK=/tmp/uclibc
 b) create directory structure
$ mkdir -p ${WORK}/kernel
$ mkdir -p ${WORK}/kernel_headers
$ mkdir -p ${WORK}/uclibc
$ mkdir -p ${WORK}/uclibc_install

2) Prepare the kernel headers
 a) install your kernel source tree in ${WORK}/kernel
 According to your source delivery medium, either copy unzip or git clone your
source code here
 b) install your kernel headers inside ${WORK}/kernel_headers
$ cd ${WORK}/kernel
$ make headers_install ARCH=arm INSTALL_HDR_PATH=${WORK}/kernel_headers CROSS_COMPILE=arm-v7-linux-uclibceabi-

3) Build and install uclibc
 a) install the fdpic uclibc source tree in ${WORK}/uclibc
 According to your source delivery medium, either copy unzip or git clone your
source code here
 b) configure uclibc as follows:
$ cd ${WORK}/uclibc
$ cp config_template .config
$ sed -i "s;__KERNEL_HEADERS__;${WORK}/kernel_headers/include;g" .config
$ sed -i "s;__CROSS_COMPILER_PREFIX__;arm-v7-linux-uclibceabi-;g" .config
$ sed -i "s;__DODEBUG__;# DODEBUG is not set;g" .config
$ sed -i "s;# COMPILE_IN_THUMB_MODE is not set;COMPILE_IN_THUMB_MODE=y;g" .config
$ sed -i "s;__DOSTRIP__;# DOSTRIP is not set;g" .config

 c) compile uclibc
$ cd ${WORK}/uclibc
$ make all

 d) install uclibc
$ cd ${WORK}/uclibc
$ make PREFIX=${WORK}/uclibc_install install

